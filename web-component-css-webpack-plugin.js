const { RawSource } = require('webpack-sources')

function WebComponentCssPlugin(options = {}) {
  this.options = options
}

WebComponentCssPlugin.prototype.apply = function(compiler) {
  const { options } = this
  const { placeholder = 'NAUTIL_WEB_COMPONENT_CSS_TEXT' } = options
  compiler.hooks.emit.tap('WebComponentCssPlugin', function(compilation) {
    const { assets, chunks } = compilation
    const files = Object.keys(assets)
    const cssfiles = []
    const jsfiles = []

    files.forEach((file) => {
      const ext = file.split('.').pop()
      const source = assets[file]
      if (ext === 'css') {
        cssfiles.push(source)
        delete assets[file]
      }
      else if (ext === 'js') {
        jsfiles.push({ file, source })
      }
    })

    let cssText = ''
    cssfiles.forEach((source) => {
      const text = source.source()
      cssText += text
    })

    let injected = false
    jsfiles.forEach(({ file, source }) => {
      const text = source.source()
      if (text.indexOf(placeholder) === -1) {
        return
      }

      if (injected) {
        return
      }

      const code = `/** ${placeholder} **/\nvar ${placeholder} = ${JSON.stringify(cssText)};\n` + text
      const newSource = new RawSource(code)
      assets[file] = newSource
    })

    // delete css files which generated by other plugin
    chunks.forEach((chunk) => {
      const { files } = chunk
      const newFiles = files.filter(file => file.split('.').pop() !== 'css')
      chunk.files = newFiles
    })
  })
}

module.exports = WebComponentCssPlugin
